$date
	Tue Mar 31 22:02:30 2009
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module ecpu_tb $end
$var wire 16 ! A_ACC [15:0] $end
$var wire 16 " B_ACC [15:0] $end
$var wire 1 # CLK $end
$var wire 1 $ RESET_N $end
$var wire 64 % duration [63:0] $end
$var reg 1 & INT_EXT $end
$scope module ecpu0 $end
$var wire 16 ' A [15:0] $end
$var wire 16 ( A_ACC [15:0] $end
$var wire 16 ) B [15:0] $end
$var wire 16 * B_ACC [15:0] $end
$var wire 1 + C $end
$var wire 1 # CLK $end
$var wire 1 , CLR $end
$var wire 1 - INT_EXT $end
$var wire 1 $ RESET_N $end
$var wire 4 . S [3:0] $end
$var wire 1 / V $end
$var wire 16 0 Y [15:0] $end
$var wire 1 1 Z $end
$var wire 1 2 alu_clk $end
$var wire 10 3 ram_address [9:0] $end
$var wire 1 4 ram_clk $end
$var wire 16 5 ram_data_in [15:0] $end
$var wire 16 6 ram_data_out [15:0] $end
$var wire 1 7 ram_enable $end
$var wire 1 8 ram_rd $end
$var wire 1 9 ram_reset $end
$var wire 16 : ram_rw_mask [15:0] $end
$var wire 1 ; ram_wr $end
$var wire 10 < rom_address [9:0] $end
$var wire 1 = rom_clk $end
$var wire 16 > rom_data_in [15:0] $end
$var wire 16 ? rom_data_out [15:0] $end
$var wire 1 @ rom_enable $end
$var wire 1 A rom_rd $end
$var wire 1 B rom_reset $end
$var wire 16 C rom_rw_mask [15:0] $end
$var wire 1 D rom_wr $end
$scope module ecpu_alu $end
$var wire 16 E A [15:0] $end
$var wire 16 F B [15:0] $end
$var wire 1 + C $end
$var wire 1 2 CLK $end
$var wire 1 , CLR $end
$var wire 4 G S [3:0] $end
$var wire 1 / V $end
$var wire 16 H Y [15:0] $end
$var wire 1 1 Z $end
$var wire 1 I add_AB $end
$var wire 1 J and_AB $end
$var wire 1 K clr_ALL $end
$var wire 1 L clr_C $end
$var wire 1 M clr_V $end
$var wire 1 N clr_Z $end
$var wire 1 O cmp_AB $end
$var wire 1 P cpl_A $end
$var wire 1 Q cpl_B $end
$var wire 1 R dec_A $end
$var wire 1 S dec_B $end
$var wire 1 T inc_A $end
$var wire 1 U inc_B $end
$var wire 1 V load_inputs $end
$var wire 1 W load_outputs $end
$var wire 1 X mul_AB $end
$var wire 1 Y or_AB $end
$var wire 1 Z reset $end
$var wire 1 [ sl_AB $end
$var wire 1 \ sr_AB $end
$var wire 1 ] sub_AB $end
$var wire 1 ^ xor_AB $end
$scope module controller $end
$var wire 1 I add_AB $end
$var wire 1 J and_AB $end
$var wire 1 2 clk $end
$var wire 1 K clr $end
$var wire 1 L clr_C $end
$var wire 1 M clr_V $end
$var wire 1 N clr_Z $end
$var wire 1 O cmp_AB $end
$var wire 1 P cpl_A $end
$var wire 1 Q cpl_B $end
$var wire 1 R dec_A $end
$var wire 1 S dec_B $end
$var wire 1 T inc_A $end
$var wire 1 U inc_B $end
$var wire 1 X mul_AB $end
$var wire 4 _ opcode [3:0] $end
$var wire 1 Y or_AB $end
$var wire 1 Z reset $end
$var wire 1 [ sl_AB $end
$var wire 1 \ sr_AB $end
$var wire 1 ] sub_AB $end
$var wire 1 ^ xor_AB $end
$var reg 1 ` load_inputs $end
$var reg 1 a load_outputs $end
$var reg 4 b next_opcode [3:0] $end
$var reg 65538 c opcode_sel [65537:0] $end
$var reg 4 d this_opcode [3:0] $end
$upscope $end
$scope module datapath $end
$var wire 16 e A [15:0] $end
$var wire 16 f B [15:0] $end
$var wire 1 + C $end
$var wire 1 / V $end
$var wire 16 g Y [15:0] $end
$var wire 1 1 Z $end
$var wire 1 I add_AB $end
$var wire 1 h adderORsel $end
$var wire 1 i adderXORsel $end
$var wire 16 j adder_in_a [15:0] $end
$var wire 16 k adder_in_b [15:0] $end
$var wire 16 l adder_out [15:0] $end
$var wire 16 m alu_out [15:0] $end
$var wire 1 J and_AB $end
$var wire 1 n carry $end
$var wire 1 o carry_in $end
$var wire 17 p carry_out [16:0] $end
$var wire 1 2 clk $end
$var wire 1 K clr $end
$var wire 1 L clr_C $end
$var wire 1 M clr_V $end
$var wire 1 N clr_Z $end
$var wire 1 O cmp_AB $end
$var wire 1 P cpl_A $end
$var wire 1 Q cpl_B $end
$var wire 1 R dec_A $end
$var wire 1 S dec_B $end
$var wire 1 T inc_A $end
$var wire 1 U inc_B $end
$var wire 1 V load_inputs $end
$var wire 1 W load_outputs $end
$var wire 16 q logic0 [15:0] $end
$var wire 16 r logic1 [15:0] $end
$var wire 1 X mul_AB $end
$var wire 1 Y or_AB $end
$var wire 1 Z reset $end
$var wire 1 s shifter_carry $end
$var wire 1 t shifter_direction $end
$var wire 16 u shifter_inA [15:0] $end
$var wire 16 v shifter_inB [15:0] $end
$var wire 16 w shifter_out [15:0] $end
$var wire 1 [ sl_AB $end
$var wire 1 \ sr_AB $end
$var wire 1 ] sub_AB $end
$var wire 1 ^ xor_AB $end
$var reg 16 x Areg [15:0] $end
$var reg 16 y Breg [15:0] $end
$var reg 1 z Creg $end
$var reg 1 { Vreg $end
$var reg 16 | Yreg [15:0] $end
$var reg 1 } Zreg $end
$scope module adder $end
$var wire 1 h ORsel $end
$var wire 1 i XORsel $end
$var wire 16 ~ XandY [15:0] $end
$var wire 16 !" XorY [15:0] $end
$var wire 16 "" XxorY [15:0] $end
$var wire 16 #" and_result [15:0] $end
$var wire 1 o carry_in $end
$var wire 16 $" or_result [15:0] $end
$var wire 16 %" x [15:0] $end
$var wire 16 &" xor_result [15:0] $end
$var wire 16 '" y [15:0] $end
$var reg 17 (" carry_out [16:0] $end
$var reg 32 )" i [31:0] $end
$var reg 16 *" z [15:0] $end
$upscope $end
$scope module shifter $end
$var wire 1 2 clk $end
$var wire 1 t direction $end
$var wire 16 +" x [15:0] $end
$var wire 16 ," y [15:0] $end
$var reg 1 -" c $end
$var reg 16 ." y_tmp [15:0] $end
$var reg 16 /" z [15:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module ecpu_ram $end
$var wire 10 0" address [9:0] $end
$var wire 1 4 clk $end
$var wire 16 1" data_in [15:0] $end
$var wire 16 2" data_out [15:0] $end
$var wire 1 7 enable $end
$var wire 1 8 rd $end
$var wire 1 9 reset $end
$var wire 1 3" rw $end
$var wire 16 4" rw_mask [15:0] $end
$var wire 1 ; wr $end
$scope module ram_1k_x_16_0 $end
$var wire 10 5" address [9:0] $end
$var wire 1 4 clk $end
$var wire 16 6" data_in [15:0] $end
$var wire 16 7" data_out [15:0] $end
$var wire 1 7 enable $end
$var wire 1 8 rd $end
$var wire 1 9 reset $end
$var wire 16 8" rw_mask [15:0] $end
$var wire 1 3" wr $end
$var reg 16 9" data_out_reg [15:0] $end
$upscope $end
$upscope $end
$scope module ecpu_rom $end
$var wire 10 :" address [9:0] $end
$var wire 1 = clk $end
$var wire 16 ;" data_in [15:0] $end
$var wire 16 <" data_out [15:0] $end
$var wire 1 @ enable $end
$var wire 1 A rd $end
$var wire 1 B reset $end
$var wire 16 =" rw_mask [15:0] $end
$var wire 1 D wr $end
$scope module rom_mk_x_n_0 $end
$var wire 10 >" address [9:0] $end
$var wire 1 = clk $end
$var wire 16 ?" data_in [15:0] $end
$var wire 16 @" data_out [15:0] $end
$var wire 1 @ enable $end
$var wire 1 A rd $end
$var wire 1 B reset $end
$var wire 16 A" rw_mask [15:0] $end
$var wire 1 B" wr $end
$var reg 16 C" data_out_reg [15:0] $end
$upscope $end
$upscope $end
$scope module ecpu_core $end
$var wire 16 D" A [15:0] $end
$var wire 16 E" A_ACC [15:0] $end
$var wire 16 F" B [15:0] $end
$var wire 16 G" B_ACC [15:0] $end
$var wire 1 + C $end
$var wire 1 # CLK $end
$var wire 1 , CLR $end
$var wire 1 - INT_EXT $end
$var wire 1 $ RESET_N $end
$var wire 4 H" S [3:0] $end
$var wire 1 / V $end
$var wire 16 I" Y [15:0] $end
$var wire 1 1 Z $end
$var wire 4 J" a_acc_reg_select [3:0] $end
$var wire 4 K" b_acc_reg_select [3:0] $end
$var wire 1 L" load_alu $end
$var wire 10 M" ram_address [9:0] $end
$var wire 16 N" ram_data_in [15:0] $end
$var wire 16 O" ram_data_out [15:0] $end
$var wire 1 7 ram_enable $end
$var wire 1 8 ram_rd $end
$var wire 16 P" ram_rw_mask [15:0] $end
$var wire 1 ; ram_wr $end
$var wire 1 Q" read_alu $end
$var wire 10 R" rom_address [9:0] $end
$var wire 1 S" rom_byte_granted $end
$var wire 1 T" rom_byte_required $end
$var wire 1 U" rom_byte_valid $end
$var wire 16 V" rom_data_out [15:0] $end
$var wire 1 @ rom_enable $end
$var wire 1 A rom_rd $end
$var wire 16 W" rom_rw_mask [15:0] $end
$scope module ecpu_core_datapath0 $end
$var wire 16 X" A [15:0] $end
$var wire 16 Y" A_ACC [15:0] $end
$var wire 16 Z" B [15:0] $end
$var wire 16 [" B_ACC [15:0] $end
$var wire 1 + C $end
$var wire 1 , CLR $end
$var wire 4 \" S [3:0] $end
$var wire 1 / V $end
$var wire 16 ]" Y [15:0] $end
$var wire 1 1 Z $end
$var wire 4 ^" a_acc_reg_select [3:0] $end
$var wire 4 _" b_acc_reg_select [3:0] $end
$var wire 1 # clk $end
$var wire 1 L" load_alu $end
$var wire 1 Q" read_alu $end
$var wire 1 S" rom_byte_granted $end
$var wire 1 T" rom_byte_required $end
$var wire 16 `" rom_data_out [15:0] $end
$var reg 1 a" load_alu_reg0 $end
$var reg 1 b" load_alu_reg1 $end
$upscope $end
$scope module ecpu_core_controller0 $end
$var wire 16 c" A [15:0] $end
$var wire 16 d" B [15:0] $end
$var wire 1 + C $end
$var wire 1 # CLK $end
$var wire 1 , CLR $end
$var wire 1 - INT_EXT $end
$var wire 1 $ RESET_N $end
$var wire 4 e" S [3:0] $end
$var wire 1 / V $end
$var wire 16 f" Y [15:0] $end
$var wire 1 1 Z $end
$var wire 10 g" ram_address [9:0] $end
$var wire 16 h" ram_data_in [15:0] $end
$var wire 16 i" ram_data_out [15:0] $end
$var wire 1 7 ram_enable $end
$var wire 1 8 ram_rd $end
$var wire 16 j" ram_rw_mask [15:0] $end
$var wire 1 ; ram_wr $end
$var wire 10 k" rom_address [9:0] $end
$var wire 1 T" rom_byte_required $end
$var wire 16 l" rom_data_out [15:0] $end
$var wire 1 @ rom_enable $end
$var wire 1 A rom_rd $end
$var wire 16 m" rom_rw_mask [15:0] $end
$var reg 4 n" a_acc_reg_select [3:0] $end
$var reg 4 o" b_acc_reg_select [3:0] $end
$var reg 2 p" counter [1:0] $end
$var reg 1 q" halt_cpu $end
$var reg 1 r" load_alu $end
$var reg 2 s" next_counter [1:0] $end
$var reg 10 t" next_pcounter [9:0] $end
$var reg 3 u" next_state [2:0] $end
$var reg 10 v" ram_address_reg [9:0] $end
$var reg 16 w" ram_data_in_reg [15:0] $end
$var reg 1 x" ram_enable_reg $end
$var reg 1 y" ram_rd_reg $end
$var reg 16 z" ram_rw_mask_reg [15:0] $end
$var reg 1 {" ram_wr_reg $end
$var reg 1 |" read_alu $end
$var reg 10 }" rom_address_reg [9:0] $end
$var reg 1 ~" rom_byte_granted $end
$var reg 1 !# rom_byte_valid $end
$var reg 1 "# rom_enable_reg $end
$var reg 1 ## rom_rd_reg $end
$var reg 16 $# rom_rw_mask_reg [15:0] $end
$var reg 10 %# this_pcounter [9:0] $end
$var reg 3 &# this_state [2:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module ecpu_monitor0 $end
$var wire 16 '# A_ACC [15:0] $end
$var wire 16 (# B_ACC [15:0] $end
$var wire 1 # CLK $end
$var wire 1 - INT_EXT $end
$var wire 1 $ RESET_N $end
$upscope $end
$scope module ecpu0_reset_gen $end
$var wire 1 # clk $end
$var wire 64 )# duration [63:0] $end
$var reg 1 *# reset $end
$upscope $end
$scope module ecpu0_clk_gen $end
$var wire 64 +# period_hi [63:0] $end
$var wire 64 ,# period_lo [63:0] $end
$var reg 1 -# clk $end
$upscope $end
$scope module ecpu0_tb_ticker $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
0-#
b1010 ,#
b1010 +#
0*#
b100101100 )#
bx (#
bx '#
bx &#
bx %#
bx $#
x##
x"#
x!#
x~"
bx }"
x|"
x{"
bx z"
xy"
xx"
bx w"
bx v"
bx u"
bx t"
b0 s"
xr"
xq"
b0 p"
bx o"
bx n"
bx m"
bx l"
bx k"
bx j"
bx i"
bx h"
bx g"
bx f"
bx e"
bx d"
bx c"
xb"
xa"
bx `"
bx _"
bx ^"
bx ]"
bx \"
bx ["
bx Z"
bx Y"
bx X"
bx W"
bx V"
xU"
xT"
xS"
bx R"
xQ"
bx P"
bx O"
bx N"
bx M"
xL"
bx K"
bx J"
bx I"
bx H"
bx G"
bx F"
bx E"
bx D"
bx C"
0B"
bx A"
bx @"
bz ?"
bx >"
bx ="
bx <"
bz ;"
bx :"
bx 9"
bx 8"
bx 7"
bx 6"
bx 5"
bx 4"
z3"
bx 2"
bx 1"
bx 0"
bx /"
b0xxx ."
0-"
bx ,"
bx +"
bx *"
b10000 )"
bx ("
bx '"
bx &"
bx %"
bx $"
bx #"
bx ""
bx !"
bx ~
0}
bx |
x{
zz
bx y
bx x
bx w
bx v
bx u
xt
0s
b1 r
b0 q
bx p
xo
xn
bx m
bx l
bx k
bx j
xi
xh
bx g
bx f
bx e
bx d
bx c
bx b
xa
x`
bx _
x^
x]
x\
x[
xZ
xY
xX
xW
xV
xU
xT
xS
xR
xQ
xP
xO
zN
zM
zL
xK
xJ
xI
bx H
bx G
bx F
bx E
0D
bx C
1B
xA
x@
bx ?
bz >
0=
bx <
x;
bx :
19
x8
x7
bx 6
bx 5
04
bx 3
02
01
bx 0
x/
bx .
0-
x,
z+
bx *
bx )
bx (
bx '
0&
b100101100 %
0$
0#
bx "
bx !
$end
#10000
b0 %#
b0 &#
0q"
xz
x+
1-#
1=
14
12
1#
#20000
0-#
0=
04
02
0#
#30000
b0 s"
0r"
0L"
0|"
0Q"
1-#
1=
14
12
1#
#40000
0-#
0=
04
02
0#
#50000
0a"
b0 s"
1-#
1=
14
12
1#
#60000
0-#
0=
04
02
0#
#70000
b0 s"
0b"
1-#
1=
14
12
1#
#80000
0-#
0=
04
02
0#
#90000
b0 s"
1-#
1=
14
12
1#
#100000
0-#
0=
04
02
0#
#110000
b0 s"
1-#
1=
14
12
1#
#120000
0-#
0=
04
02
0#
#130000
b0 s"
1-#
1=
14
12
1#
#140000
0-#
0=
04
02
0#
#150000
b0 s"
1-#
1=
14
12
1#
#160000
0-#
0=
04
02
0#
#170000
b0 s"
1-#
1=
14
12
1#
#180000
0-#
0=
04
02
0#
#190000
b0 s"
1-#
1=
14
12
1#
#200000
0-#
0=
04
02
0#
#210000
b0 s"
1-#
1=
14
12
1#
#220000
0-#
0=
04
02
0#
#230000
b0 s"
1-#
1=
14
12
1#
#240000
0-#
0=
04
02
0#
#250000
b0 s"
1-#
1=
14
12
1#
#260000
0-#
0=
04
02
0#
#270000
b0 s"
1-#
1=
14
12
1#
#280000
0-#
0=
04
02
0#
#290000
b0 s"
1-#
1=
14
12
1#
#300000
0-#
0=
04
02
0#
#310000
0T"
b0 t"
0~"
0S"
0!#
0U"
b10 u"
0##
0A
0"#
0@
b1 s"
0B
09
0,
0Z
1*#
1$
1-#
1=
14
12
1#
#320000
0-#
0=
04
02
0#
#330000
1T"
1~"
1S"
1!#
1U"
b0 n"
b0 J"
b0 ^"
b10 u"
b1 t"
b0 }"
b0 <
b0 :"
b0 >"
b0 R"
b0 k"
b1111111111111111 $#
b1111111111111111 C
b1111111111111111 ="
b1111111111111111 A"
b1111111111111111 W"
b1111111111111111 m"
1##
1A
1"#
1@
b10 &#
b10 s"
1-#
1=
14
12
1#
#340000
0-#
0=
04
02
0#
#350000
b10 t"
b1 }"
b1 <
b1 :"
b1 >"
b1 R"
b1 k"
b1 !
b1 (
b1 E"
b1 Y"
b1 '#
b11 s"
b1 %#
b1 C"
b1 ?
b1 <"
b1 @"
b1 V"
b1 `"
b1 l"
1-#
1=
14
12
1#
#360000
0-#
0=
04
02
0#
#370000
b11 t"
b10 }"
b10 <
b10 :"
b10 >"
b10 R"
b10 k"
b100000 !
b100000 (
b100000 E"
b100000 Y"
b100000 '#
b10 %#
b0 s"
b100000 C"
b100000 ?
b100000 <"
b100000 @"
b100000 V"
b100000 `"
b100000 l"
1-#
1=
14
12
1#
#380000
0-#
0=
04
02
0#
#390000
b100 t"
b11 }"
b11 <
b11 :"
b11 >"
b11 R"
b11 k"
b11 !
b11 (
b11 E"
b11 Y"
b11 '#
b1 s"
b11 %#
b11 C"
b11 ?
b11 <"
b11 @"
b11 V"
b11 `"
b11 l"
1-#
1=
14
12
1#
#400000
0-#
0=
04
02
0#
#410000
b101 t"
b100 }"
b100 <
b100 :"
b100 >"
b100 R"
b100 k"
b1000000 !
b1000000 (
b1000000 E"
b1000000 Y"
b1000000 '#
b100 %#
b10 s"
b1000000 C"
b1000000 ?
b1000000 <"
b1000000 @"
b1000000 V"
b1000000 `"
b1000000 l"
1-#
1=
14
12
1#
#420000
0-#
0=
04
02
0#
#430000
b110 t"
b101 }"
b101 <
b101 :"
b101 >"
b101 R"
b101 k"
b101 !
b101 (
b101 E"
b101 Y"
b101 '#
b11 s"
b101 %#
b101 C"
b101 ?
b101 <"
b101 @"
b101 V"
b101 `"
b101 l"
1-#
1=
14
12
1#
#440000
0-#
0=
04
02
0#
#450000
b111 t"
b110 }"
b110 <
b110 :"
b110 >"
b110 R"
b110 k"
b1100000 !
b1100000 (
b1100000 E"
b1100000 Y"
b1100000 '#
b110 %#
b0 s"
b1100000 C"
b1100000 ?
b1100000 <"
b1100000 @"
b1100000 V"
b1100000 `"
b1100000 l"
1-#
1=
14
12
1#
#460000
0-#
0=
04
02
0#
#470000
b1000 t"
b111 }"
b111 <
b111 :"
b111 >"
b111 R"
b111 k"
b111 !
b111 (
b111 E"
b111 Y"
b111 '#
b1 s"
b111 %#
b111 C"
b111 ?
b111 <"
b111 @"
b111 V"
b111 `"
b111 l"
1-#
1=
14
12
1#
#480000
0-#
0=
04
02
0#
#490000
b100 u"
b1001 t"
b1000 }"
b1000 <
b1000 :"
b1000 >"
b1000 R"
b1000 k"
b0 .
b0 G
b0 _
b0 H"
b0 \"
b0 e"
b10000000 !
b10000000 (
b10000000 E"
b10000000 Y"
b10000000 '#
b1000 %#
b0 s"
1|"
1Q"
b10000000 C"
b10000000 ?
b10000000 <"
b10000000 @"
b10000000 V"
b10000000 `"
b10000000 l"
1-#
1=
14
12
1#
#500000
0-#
0=
04
02
0#
#510000
bx *"
bx ("
0o
b10000 )"
1i
0t
0h
1I
0T
0U
0]
0O
0[
0\
0K
0R
0S
0X
0P
0J
0Y
0^
0Q
b1 n"
b1 J"
b1 ^"
b1010 t"
b1001 }"
b1001 <
b1001 :"
b1001 >"
b1001 R"
b1001 k"
b1 p"
1a
1W
1`
1V
b1 c
b1 '
b1 E
b1 e
b1 D"
b1 X"
b1 c"
b1 !
b1 (
b1 E"
b1 Y"
b1 '#
b1 s"
1r"
1L"
0|"
0Q"
b1001 %#
b100 &#
b1 C"
b1 ?
b1 <"
b1 @"
b1 V"
b1 `"
b1 l"
b0 d
1-#
1=
14
12
1#
#520000
0-#
0=
04
02
0#
#530000
bx *"
bx0 ("
bx0 p
b1011 t"
b1010 }"
b1010 <
b1010 :"
b1010 >"
b1010 R"
b1010 k"
b10 p"
b0x ~
b0x #"
bx1 !"
bx1 $"
b10000 )"
b10 !
b10 (
b10 E"
b10 Y"
b10 '#
b1 j
b1 %"
b10 )
b10 F
b10 f
b10 F"
b10 Z"
b10 d"
1a"
b1010 %#
b10 s"
0r"
0L"
b10 C"
b10 ?
b10 <"
b10 @"
b10 V"
b10 `"
b10 l"
b1 x
b1 u
b1 +"
1-#
1=
14
12
1#
#540000
b1 /"
b1 w
0-#
0=
04
02
0#
#550000
0n
b11 m
b0 p
b11 l
b11 *"
b0 ("
b1100 t"
b1011 }"
b1011 <
b1011 :"
b1011 >"
b1011 R"
b1011 k"
b11 p"
b0 !
b0 (
b0 E"
b0 Y"
b0 '#
b11 ""
b11 &"
b0 ~
b0 #"
b11 !"
b11 $"
b10000 )"
b10 k
b10 '"
b11 s"
b1011 %#
1b"
0a"
b0 C"
b0 ?
b0 <"
b0 @"
b0 V"
b0 `"
b0 l"
b10 y
b10 v
b10 ,"
1-#
1=
14
12
1#
#560000
b100 /"
b100 w
b0 ."
0-#
0=
04
02
0#
#570000
0##
0A
0"#
0@
b0 p"
b10 u"
b11 !
b11 (
b11 E"
b11 Y"
b11 '#
0b"
b1100 %#
b0 s"
b111 C"
b111 ?
b111 <"
b111 @"
b111 V"
b111 `"
b111 l"
0z
0+
b11 |
b11 0
b11 H
b11 g
b11 I"
b11 ]"
b11 f"
1-#
1=
14
12
1#
#580000
b0 ."
b100 /"
b100 w
0-#
0=
04
02
0#
#590000
b111 !
b111 (
b111 E"
b111 Y"
b111 '#
b0 n"
b0 J"
b0 ^"
b1101 t"
b1100 }"
b1100 <
b1100 :"
b1100 >"
b1100 R"
b1100 k"
1##
1A
1"#
1@
b1 s"
b10 &#
1-#
1=
14
12
1#
#600000
b0 ."
b100 /"
b100 w
0-#
0=
04
02
0#
#610000
b100 u"
b1110 t"
b1101 }"
b1101 <
b1101 :"
b1101 >"
b1101 R"
b1101 k"
b10000000 !
b10000000 (
b10000000 E"
b10000000 Y"
b10000000 '#
b1101 %#
b0 s"
1|"
1Q"
b10000000 C"
b10000000 ?
b10000000 <"
b10000000 @"
b10000000 V"
b10000000 `"
b10000000 l"
1-#
1=
14
12
1#
#620000
b0 ."
b100 /"
b100 w
0-#
0=
04
02
0#
#630000
b1 n"
b1 J"
b1 ^"
b1111 t"
b1110 }"
b1110 <
b1110 :"
b1110 >"
b1110 R"
b1110 k"
b1 p"
b1010000 '
b1010000 E
b1010000 e
b1010000 D"
b1010000 X"
b1010000 c"
b1010000 !
b1010000 (
b1010000 E"
b1010000 Y"
b1010000 '#
b1 s"
1r"
1L"
0|"
0Q"
b1110 %#
b100 &#
b1010000 C"
b1010000 ?
b1010000 <"
b1010000 @"
b1010000 V"
b1010000 `"
b1010000 l"
1-#
1=
14
12
1#
#640000
b0 ."
b100 /"
b100 w
0-#
0=
04
02
0#
#650000
b1010010 m
b1010010 l
b1010010 *"
b0 ("
b10000 t"
b1111 }"
b1111 <
b1111 :"
b1111 >"
b1111 R"
b1111 k"
b10 p"
b1010010 ""
b1010010 &"
b1010010 !"
b1010010 $"
b10000 )"
b1010001 !
b1010001 (
b1010001 E"
b1010001 Y"
b1010001 '#
b1010000 j
b1010000 %"
b1010001 )
b1010001 F
b1010001 f
b1010001 F"
b1010001 Z"
b1010001 d"
1a"
b1111 %#
b10 s"
0r"
0L"
b1010001 C"
b1010001 ?
b1010001 <"
b1010001 @"
b1010001 V"
b1010001 `"
b1010001 l"
b1010000 x
b1010000 u
b1010000 +"
1-#
1=
14
12
1#
#660000
b0 ."
b101000000 /"
b101000000 w
0-#
0=
04
02
0#
#670000
b10100001 m
b10100000 p
b10100001 l
b10100001 *"
b10100000 ("
b10001 t"
b10000 }"
b10000 <
b10000 :"
b10000 >"
b10000 R"
b10000 k"
b11 p"
b0 !
b0 (
b0 E"
b0 Y"
b0 '#
b1 ""
b1 &"
b1010000 ~
b1010000 #"
b1010001 !"
b1010001 $"
b10000 )"
b1010001 k
b1010001 '"
b11 s"
b10000 %#
1b"
0a"
b0 C"
b0 ?
b0 <"
b0 @"
b0 V"
b0 `"
b0 l"
b1010010 |
b1010010 0
b1010010 H
b1010010 g
b1010010 I"
b1010010 ]"
b1010010 f"
b1010001 y
b1010001 v
b1010001 ,"
1-#
1=
14
12
1#
#680000
b0 ."
b10100000 /"
b10100000 w
0-#
0=
04
02
0#
#690000
0##
0A
0"#
0@
b0 p"
b10 u"
b10100001 !
b10100001 (
b10100001 E"
b10100001 Y"
b10100001 '#
0b"
b10001 %#
b0 s"
b11111111 C"
b11111111 ?
b11111111 <"
b11111111 @"
b11111111 V"
b11111111 `"
b11111111 l"
b10100001 |
b10100001 0
b10100001 H
b10100001 g
b10100001 I"
b10100001 ]"
b10100001 f"
1-#
1=
14
12
1#
#700000
b0 ."
b10100000 /"
b10100000 w
0-#
0=
04
02
0#
#710000
b11111111 !
b11111111 (
b11111111 E"
b11111111 Y"
b11111111 '#
b0 n"
b0 J"
b0 ^"
b10010 t"
b10001 }"
b10001 <
b10001 :"
b10001 >"
b10001 R"
b10001 k"
1##
1A
1"#
1@
b1 s"
b10 &#
1-#
1=
14
12
1#
#720000
b0 ."
b10100000 /"
b10100000 w
0-#
0=
04
02
0#
#730000
b10011 t"
b10010 }"
b10010 <
b10010 :"
b10010 >"
b10010 R"
b10010 k"
b10010 %#
b10 s"
1-#
1=
14
12
1#
#740000
b0 ."
b10100000 /"
b10100000 w
0-#
0=
04
02
0#
#750000
b10100 t"
b10011 }"
b10011 <
b10011 :"
b10011 >"
b10011 R"
b10011 k"
b11 s"
b10011 %#
1-#
1=
14
12
1#
